version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/Ankr-network/dccn-fees
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: copy ssh key
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region us-west-2)
      - run:
          name: Install Kops and Kubectl
          command: |
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Build & Push Docker Image"
          command: |
            set -x

            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAME == "develop") ]]
            then
              BRANCH_NAME="dev"
              K8S_CLUSTER="stage.hub"
              APP_DOMAIN="app-stage.ankr.com"
            elif [[ ($BRANCH_NAME == "master") ]]
            then
              BRANCH_NAME="stage"
              K8S_CLUSTER="hub"
              APP_DOMAIN="app.ankr.com"
            else
              BRANCH_NAME="feat"
              K8S_CLUSTER="dev.hub"
              APP_DOMAIN="app-dev.ankr.com"
            fi

            declare -a component_arr=("dccn-fees" )
            declare -a dockerfile_arr=("fees")
            if [[ (${#component_arr[@]} == ${#dockerfile_arr[@]}) ]]
            then
              arrlen=${#component_arr[@]}
            else
              exit 1
            fi



            for((i=0; i<arrlen; i++)); do
              docker build --build-arg APP_DOMAIN=${APP_DOMAIN} --no-cache -f "dockerfile"/${dockerfile_arr[$i]}.Dockerfile -t ${component_arr[$i]}:$BRANCH_NAME .
              for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
                docker tag ${component_arr[$i]}:$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/${component_arr[$i]}:$TAG
                docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/${component_arr[$i]}:$TAG
              done
            done
            declare -a deployment_arr=("fees" )
            declare -a name_arr=("dccn-fees")

            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            for ((i=0; i<arrlen; i++)); do
              kubectl set image ${name_arr[$i]}=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/${component_arr[$i]}:${BRANCH_NAME}${DATE} --local -f kubernetes/${dockerfile_arr[$i]}.yml -o yaml > kubernetes/${dockerfile_arr[$i]}_patch.yml
              kubectl apply -f kubernetes/${dockerfile_arr[$i]}_patch.yml
              if ! kubectl rollout status deploy/${deployment_arr[$i]} --watch=true --timeout=60s; then
                echo "Deploy failed, roll back to previous version"
                kubectl rollout undo deploy/${deployment_arr[$i]}
              fi
            done



            kubectl apply -f  kubernetes/fees-svc.yml
